plot(admin200$geometry, add=TRUE)
st_transform(plates200, "Robinson")
projected200 <-st_transform(plates200, "ESRI:53030")
plot(projected200)
plot(projected200, col="gray")
plot(projected200, col="gray", border=NA)
# B. Putting points on the map
erlangen <- c(10.97, 49.58)
sydney <- c(151.19, -33.86)
cities <- rbind(erlangen,sydney)
# 1. Present day:
plot(poly$geometry)
points(cities, pch=3, col="red")
# 2. past
cities200 <- reconstruct(cities, 200)
plot(plates200$geometry, col="gray", border=NA)
points(cities200, pch=3, col="red")
# same as above!
platesKPGMatt <- reconstruct("plates", age=66, model="MATTHEWS2016")
citiesKPGMatt <- reconstruct(cities, age=66, model="MATTHEWS2016")
plot(plates200Matt$geometry, col="gray", border=NA)
points(cities200Matt, pch=3, col="red")
# same as above!
platesKPGMatt <- reconstruct("plates", age=66, model="MATTHEWS2016")
citiesKPGMatt <- reconstruct(cities, age=66, model="MATTHEWS2016")
x11()
plot(platesKPGMatt$geometry, col="gray", border=NA)
points(citiesKPGMatt, pch=3, col="red")
platesKPGSco <- reconstruct("plates", age=66)
citiesKPGSco <- reconstruct(cities, age=66)
plot(platesKPGMatt$geometry, col="gray", border=NA)
plot(platesKPGSco$geometry, col="gray", border=NA, add = T)
plot(platesKPGMatt$geometry, col="gray", border=NA)
plot(platesKPGSco$geometry, col="red", border=NA, add = T)
plot(platesKPGMatt$geometry, col="green", border=NA)
plot(platesKPGSco$geometry, col="red", border=NA, add = T)
plot(platesKPGMatt$geometry, col="green", border=NA)
plot(platesKPGSco$geometry, col="brown", border=NA, add = T)
points(citiesKPGMatt, pch=3, col="red")
points(citiesKPGSco, pch=3, col="black")
plot(platesKPGMatt$geometry, col="green", border=NA)
plot(platesKPGMatt$geometry, col="green")
plot(platesKPGSco$geometry, col="brown",  add = T)
plot(platesKPGSco$geometry, col="brown")
plot(platesKPGSco$geometry, col="brown", add= T)
plot(platesKPGMatt$geometry, col="green")
plot(platesKPGSco$geometry, col="brown", add= T)
points(citiesKPGMatt, pch=3, col="red")
points(citiesKPGSco, pch=3, col="black")
##########################################################
# 2. Offline method - faster for lots of data
# Requires the chronosphere package
# Requires the GPlates application
# install.packages("chronosphere")
library(chronosphere)
# a plate tectonic model
mod <- fetch("paleomap", "model")
# A. Basics
# the same as above
plates200 <- rgplates::reconstruct("plates", age=200, model=mod)
plot(plates200$geometry, col="gray", border=NA)
plot(plates200$geometry, col="gray", border=NA)
# as above
cities200 <- reconstruct(cities, 200, model=mod)
points(cities200, pch=3, col="red")
# B. PBDB data
library(divDyn)
data(corals)
data(stages)
# B. PBDB data
library(divDyn)
data(corals)
data(stages)
# collection information
collections <- unique(corals[, c("collection_no", "lng", "lat", "stg")])
View(stages)
# collection information
collections <- unique(corals[, c("collection_no", "lng", "lat", "stg")])
# filtering of weird points...
collections <- na.omit(collections)
# I. One stage at a time
nStg <- 80
# plate reconstruction
targetAge <- stages$mid[nStg]
platesStg <- rgplates::reconstruct("plates", age=targetAge, model=mod)
# I. One stage at a time
nStg <- 81
stages$mid[81]
# plate reconstruction
targetAge <- stages$mid[nStg]
platesStg <- rgplates::reconstruct("plates", age=targetAge, model=mod)
# the points
collStg <- collections[which(collections$stg==nStg),]
coords <- collStg[, c("lng", "lat")]
coordsStg <- rgplates::reconstruct(coords, age=targetAge, model=mod)
# plotting
plot(platesStg$geometry, col="gray", border=NA)
points(coordsStg, pch=3, col="red")
nStg <- 9
# sources of data
# data -> collections$stg
# target age -> stages$mid
# plate reconstruction
targetAge <- stages$mid[nStg]
platesStg <- rgplates::reconstruct("plates", age=targetAge, model=mod)
# the points
collStg <- collections[which(collections$stg==nStg),]
coords <- collStg[, c("lng", "lat")]
coordsStg <- rgplates::reconstruct(coords, age=targetAge, model=mod)
# plotting
plot(platesStg$geometry, col="gray", border=NA)
points(coordsStg, pch=3, col="red")
# 1. Calculate everything
# all the maps
lPlates <- list()
for(i in 1:nrow(stages)){
# list of plates
lPlates[[i]] <- rgplates::reconstruct("plates", model=mod, age=stages$mid[i])
# loop counter
cat(i, "\r")
flush.console()
}
# Shorthand
lPlates <- rgplates::reconstruct("plates", model=mod, age=stages$mid)
# Target ages
collections$targetAge <- stages$mid[collections$stg]
# data in all ages
coordsPaleo <- rgplates::reconstruct(
collections[c("lng", "lat")],
age=collections$targetAge,
model=mod,
enumerate=FALSE)
# the new column names
colnames(coordsPaleo) <- c("plng", "plat")
# add it to the rest
collections <- cbind(collections, coordsPaleo)
pdf("coral_stages.pdf", width=20, height=10)
for(i in 1:nrow(stages)){
# get the relevant data
collStg <- collections[which(collections$stg==i),]
# make plot only if there is any!
if(nrow(collStg)>0){
#get the relevant map
platesStg <- lPlates[[i]] # lPlates is derived from `stages`
# plot map
title <- paste0(stages$stage[i], ", stg: ", i)
plot(platesStg$geometry, col="gray", border=NA, main=title)
points(collStg[, c("plng", "plat")], pch=3, col="red")
}
}
dev.off()
# install.packages("rgplates")
library(rgplates)
################################################################################
# 0. Last time
# data in the chronosphere
library(chronosphere)
# The PaleoMAP reconstruction model
mod <- fetch("paleomap", "model")
# simple reconstructions are possible
pl60 <- rgplates::reconstruct("plates", age=60, model=mod)
plot(pl60$geometry, col="gray")
########################################----------------------------------------
# 1.B plotting the PBDB data on it
library(divDyn)
data(corals)
data(stages)
# collection information
collections <- unique(corals[, c("collection_no", "lng", "lat", "stg")])
# filtering of weird points...
collections <- na.omit(collections)
# Using the plates - as earlier:
# for one particular stage
nStg <- 79
# plate reconstruction
targetAge <- stages$mid[nStg]
platesStg <- rgplates::reconstruct("plates", age=targetAge, model=mod)
# the points
collStg <- collections[which(collections$stg==nStg),]
coords <- collStg[, c("lng", "lat")]
coordsStg <- rgplates::reconstruct(coords, age=targetAge, model=mod)
# plotting
plot(platesStg$geometry, col="gray", border=NA)
points(coordsStg, pch=3, col="red")
coordsStg <- rgplates::reconstruct(coords, age=targetAge, model=mod, plateperiod=T)
# plotting
plot(platesStg$geometry, col="gray", border=NA)
points(coordsStg, pch=3, col="red")
################################################################################
# 1. Topography?
# data objects!
dat <- chronosphere::datasets()
# The PaleoDEMs
dems <- fetch("paleomap", "dem")
dems
# subsetting
# element name
demPresent <- dems[["dem_0"]]
# terra::rast(demPresent)
plot(demPresent)
# subsetting
# element name
demPresent <- dems[["dem_0"]]
# The PaleoDEMs
dems <- fetch("paleomap", "dem")
dems
# The PaleoDEMs
dems <- fetch("paleomap", "dem")
################################################################################
# 1. Topography?
# data objects!
library(ncdf4)
install.packages("ncdf4")
################################################################################
# 1. Topography?
# data objects!
library(ncdf4)
# The PaleoDEMs
dems <- fetch("paleomap", "dem")
dems
# subsetting
# element name
demPresent <- dems[["dem_0"]]
# terra::rast(demPresent)
plot(demPresent)
# subsetting
# element name
demPresent <- dems[["dem_0"]]
# terra::rast(demPresent)
plot(demPresent)
# for topographic maps
chronosphere::mapplot(demPresent, col="earth")
# finer resolution?
# Private chronosphere server
assignInNamespace(
"remote",
"https://www.cnidaria.nat.fau.de/tersane/public/iHm8zkj/chrono-arch-2/",
ns = "chronosphere")
# available datasets
dats <- datasets("paleomap")
# download
dems <- fetch("paleomap", "dem", res="0.5")
# names - age
dem60 <-dems["60"]
chronosphere::mapplot(dem60, col="earth")
# compared to plates?
chronosphere::mapplot(dem60, col="earth")
plot(pl60$geometry, add=TRUE, col="#BB003388")
# other time slice?
pl140 <- rgplates::reconstruct("plates", age=140, model=mod)
chronosphere::mapplot(dems["140"], col="earth")
plot(pl140$geometry, add=TRUE, col="#BB003388")
chronosphere::mapplot(dems["140"], col="earth")
plot(pl140$geometry, add=TRUE, col="#BB003388")
# other time slice?
pl350 <- rgplates::reconstruct("plates", age=350, model=mod)
chronosphere::mapplot(dems["350"], col="earth")
plot(pl350$geometry, add=TRUE, col="#BB003388")
# other time slice?
pl540 <- rgplates::reconstruct("plates", age=540, model=mod)
chronosphere::mapplot(dems["540"], col="earth")
plot(pl540$geometry, add=TRUE, col="#BB003388")
# other time slice?
pl330 <- rgplates::reconstruct("plates", age=330, model=mod)
chronosphere::mapplot(dems["330"], col="earth")
plot(pl330$geometry, add=TRUE, col="#BB003388")
########################################----------------------------------------
# With the topography
# for one particular stage
nStg <- 79
# which map is closest to the stage
# where the difference is smallest
differences <- abs(as.numeric(names(dems)) - stages$mid[nStg])
indexClosest <- which.min(differences)
targetAge <- as.numeric(names(dems))[indexClosest]
demStg <- dems[as.character(targetAge)]
# shortcut:
targetAge <- chronosphere::matchtime(as.numeric(names(dems)), stages$mid[nStg])
demStg <- chronosphere::matchtime(dems, stages$mid[nStg])
# the points
collStg <- collections[which(collections$stg==nStg),]
coords <- collStg[, c("lng", "lat")]
coordsStg <- rgplates::reconstruct(coords, age=targetAge, model=mod, plateperiod=TRUE)
# plotting
chronosphere::mapplot(demStg, col="earth")
points(coordsStg, pch=3, col="red")
########################################----------------------------------------
# Derived from this: PaleoMAP PaleoAtlas
pa <- fetch("paleomap", "paleoatlas")
pa
# images: 3 channels - R, G, B
# NO 85!!! - 80 is closest
pa["80",1] # red channel
plot(pa["80",1])
mapplot(pa["80",], rgb=TRUE)
coordsStg <- rgplates::reconstruct(coords, age=80, model=mod, plateperiod=TRUE)
points(coordsStg, pch=3, col="red")
########################################----------------------------------------
# Derived from this: PaleoMAP PaleoAtlas
pa <- fetch("paleomap", "paleoatlas", res = 0.1)
pa
# images: 3 channels - R, G, B
# NO 85!!! - 80 is closest
pa["80",1] # red channel
plot(pa["80",1])
mapplot(pa["80",], rgb=TRUE)
coordsStg <- rgplates::reconstruct(coords, age=80, model=mod, plateperiod=TRUE)
points(coordsStg, pch=3, col="red")
################################################################################
# 2. Bridge-HADCM3
had <- datasets("had-stage")
# air temperature
tas <- fetch("had-stage", "tas")
# over land?
tas85 <- tas["85"]
plot(tas85)
# the land topography
land85 <- dems["85"]
values(land85)[values(land85)<0] <- NA
plot(land85)
#Compare:
tas85
land85
# 0.5 resolution air
tas85_fine <- resample(tas85, land85)
# masking
land_air85<- mask(tas85_fine, land85)
plot(land_air85)
# air temperature
tas <- fetch("had-stage", "tas")
# over land?
tas85 <- tas["85"]
plot(tas85)
# the land topography
land85 <- dems["85"]
values(land85)[values(land85)<0] <- NA
plot(land85)
#Compare:
tas85
land85
# 0.5 resolution air
tas85_fine <- resample(tas85, land85)
# masking
land_air85<- mask(tas85_fine, land85)
plot(land_air85)
# most fossil organisms lived in water!
tos <- fetch("had-stage", var="tos")
tos <- fetch("had-stage", var="tos", res="1", ver="20190725")
tos
plot(tos["85"])
# code from earlier
# for one particular stage
nStg <- 79
# shortcut:
targetAge <- chronosphere::matchtime(as.numeric(names(tos)), stages$mid[nStg])
tosStg <- chronosphere::matchtime(tos, stages$mid[nStg])
# the points
collStg <- collections[which(collections$stg==nStg),]
coords <- collStg[, c("lng", "lat")]
coordsStg <- rgplates::reconstruct(coords, age=targetAge, model=mod, plateperiod=TRUE)
# plotting
plot(tosStg)
points(coordsStg, pch=3, col="red")
# extraction of data!
colnames(coordsStg) <- c("plng", "plat")
collStg <- cbind(collStg, coordsStg)
collStg$tos <- extract(tosStg, coordsStg)
collStg[85]
collStg
# code from earlier
# for one particular stage
nStg <- 85
# shortcut:
targetAge <- chronosphere::matchtime(as.numeric(names(tos)), stages$mid[nStg])
tosStg <- chronosphere::matchtime(tos, stages$mid[nStg])
# the points
collStg <- collections[which(collections$stg==nStg),]
coords <- collStg[, c("lng", "lat")]
coordsStg <- rgplates::reconstruct(coords, age=targetAge, model=mod, plateperiod=TRUE)
# plotting
plot(tosStg)
points(coordsStg, pch=3, col="red")
# extraction of data!
colnames(coordsStg) <- c("plng", "plat")
collStg <- cbind(collStg, coordsStg)
collStg$tos <- extract(tosStg, coordsStg)
collStg
library(ape)
species_tree <- ape::read.tree(text = "(((red_algae, (green_algae, plants)), SAR), (Amoebozoa,(Funghi,Metazoa)));")
plot(species_tree)
plot(species_tree, lwd=2)
plot(species_tree, lwd=2)
plot(species_tree, lwd=3)
plot(species_tree, cex=3)
plot(species_tree, cex=0.5)
?plot
plot(species_tree, lwd=0.5)
plot(species_tree, lwd=5)
plot(species_tree, lwd=1.5)
species_tree <- ape::read.tree(text = "(((red_algae, (green_algae, plants)), SAR), (Amoebozoa,(Funghi,Metazoa)));", lwd = 2)
plot(species_tree, lwd=1.5)
species_tree <- ape::read.tree(text = "(((red_algae, (green_algae, plants)), SAR), (Amoebozoa,(Funghi,Metazoa)));", cex = 2)
plot(species_tree, lwd=1.5)
x11()
species_tree <- ape::read.tree(text = "(((red_algae, (green_algae, plants)), SAR), (Amoebozoa,(Funghi,Metazoa)));")
plot(species_tree, lwd=1.5)
plot(species_tree, lwd=2)
plot(1,1)
plot(1,1, col="blue")
points(1,1 , col="blue")
points(1,1 , col="blue")
plot(1,1)
points(1,1)
points(1,1, cex=2)
plot(1,1)
points(1,1, cex=50)
plot(1,1)
points(1,1, cex=100, col=#C6D8AF)
plot(1,1)
points(1,1, cex=100, col=#C6D8AF)
points(1,1, cex=100, col="#C6D8AF")
lines((0,1,2),(0,1,2), cex=100, col="#C6D8AF")
lines(c(0,1,2),c(0,1,2), cex=100, col="#C6D8AF")
lines(c(0,1,2),c(0,1,2), lwd=100, col="#C6D8AF")
lines(c(0,1,2),c(0,1,2), lwd=100, col="#60695C")
lines(c(0,1,2),c(0,1,2), lwd=100, col="#753742")
p <- rnorm(5, 5 , 1)
plot(p)
p <- rnorm(10000000000000, 5 , 1)
plot(p)
p <- rnorm(100000000000, 5 , 1)
plot(p)
p <- rnorm(1000000000, 5 , 1)
plot(p)
p <- rnorm(100000, 5 , 1)
plot(p)
setwd("C:/Users/timbr/Paleobiology/MasterThesis/Genomes/Proteins/")
# Define file paths
file_list <- c("plastid_1505.nexus", "atpA_1505.nexus", "sufB_1505.nexus")
# Read data from each file
data_list <- lapply(file_list, function(x) read.nexus(x))
# Brandleian Library
library(ape)
# Read data from each file
data_list <- lapply(file_list, function(x) read.nexus(x))
# Combine data (might contain duplicates for overlapping species)
combined_data <- do.call(cbind, data_list)
# Read data from each file
data_list <- lapply(file_list, function(x) read.nexus(x))
?do.call()
file_list <- c("plastid_1505.nexus", "atpA_1505.nexus", "sufB_1505.nexus")
read.nexus("plastid_1505.nexus")
read.nexus.data("plastid_1505.nexus")
file_list <- c("plastid_1505.nexus", "atpA_1505.nexus", "sufB_1505.nexus")
data_list <- lapply(file_list, function(x) read.nexus.data(x))
data_list <- lapply(file_list, function(x) read.nexus.data(x))
read.nexus("atpA_1505.nexus")
read.nexus.data("atpA_1505.nexus")
file_list <- c("atpA_1505.nexus", "sufB_1505.nexus")
data_list <- lapply(file_list, function(x) read.nexus.data(x))
# Function to read Nexus files and extract genetic data
read_nexus <- function(file_path) {
nexus_data <- readLines(file_path)
data_start <- grep("begin data;", nexus_data)
taxon_labels <- grep("taxlabels", nexus_data, value = TRUE)
genetic_data <- nexus_data[(data_start + 1):(length(nexus_data) - 1)]
return(list(taxon_labels = taxon_labels, genetic_data = genetic_data))
}
concatenate_nexus <- function(file_paths) {
nexus_data_list <- lapply(file_paths, read_nexus)
all_taxon_labels <- unique(unlist(lapply(nexus_data_list, function(x) x$taxon_labels)))
all_genetic_data <- unlist(lapply(nexus_data_list, function(x) x$genetic_data))
combined_nexus <- c("begin data;",
paste(all_taxon_labels, collapse = "\n"),
";",
paste(all_genetic_data, collapse = "\n"),
"end;")
return(combined_nexus)
}
nexus_files <- c("plastid_1505.nexus", "atpA_1505.nexus", "sufB_1505.nexus")
combined_nexus <- concatenate_nexus(nexus_files)
nexus_data <- readLines("plastid_1505.nexus")
print(nexus_data)
data_start <- grep("begin data;", nexus_data)
data_start <- grep("MATRIX", nexus_data)
taxon_labels <- grep("TAXLABELS", nexus_data, value = TRUE)
genetic_data <- nexus_data[(data_start + 1):(length(nexus_data) - 1)]
print(genetic_data)
nexus_files <- c("plastid_1505.nexus", "atpA_1505.nexus", "sufB_1505.nexus")
concatenate_nexus <- function(file_paths) {
nexus_data_list <- lapply(file_paths, read_nexus)
all_taxon_labels <- unique(unlist(lapply(nexus_data_list, function(x) x$taxon_labels)))
all_genetic_data <- unlist(lapply(nexus_data_list, function(x) x$genetic_data))
combined_nexus <- c("begin data;",
paste(all_taxon_labels, collapse = "\n"),
";",
paste(all_genetic_data, collapse = "\n"),
"end;")
return(combined_nexus)
}
concatenate_nexus <- function(file_paths) {
nexus_data_list <- lapply(file_paths, read_nexus)
all_taxon_labels <- unique(unlist(lapply(nexus_data_list, function(x) x$taxon_labels)))
all_genetic_data <- unlist(lapply(nexus_data_list, function(x) x$genetic_data))
combined_nexus <- c("begin data;",
paste(all_taxon_labels, collapse = "\n"),
";",
paste(all_genetic_data, collapse = "\n"),
"end;")
return(combined_nexus)
}
combined_nexus <- concatenate_nexus(nexus_files)
